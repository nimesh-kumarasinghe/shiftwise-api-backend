using DinkToPdf;
using DinkToPdf.Contracts;
using System.Text;
using ShiftWiseAI.Server.Models;
namespace ShiftWiseAI.Server.Services
{
    public class PdfService
    {
        private readonly IConverter _converter;

        public PdfService(IConverter converter)
        {
            _converter = converter;
        }

        public async Task<string> GenerateShiftHtmlAsync(List<Shift> shifts, string organizationName, DateTime from, DateTime to)
        {
            var sb = new StringBuilder();
            sb.Append($@"
    <html>
    <head>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

            body {{
                font-family: 'Inter', sans-serif;
                margin: 40px;
                color: #333;
            }}
            h1 {{
                text-align: center;
                font-size: 30px;
                margin-bottom: 10px;
                color: #2c3e50;
            }}
            .second-title {{
                text-align: center;
                font-size: 26px;
                margin-bottom: 3px;
                font-weight: bold;
                color: #2c3e50;
            }}
            h2 {{
                font-size: 20px;
                margin-top: 40px;
                color: #2c3e50;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }}
            th, td {{
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
                font-size: 14px;
            }}
            th {{
                background-color: #f4f4f4;
                font-weight: 600;
            }}
            footer {{
                margin-top: 60px;
                text-align: center;
                font-size: 12px;
                color: #888;
            }}
        </style>
    </head>
    <body>
        <h1>{organizationName}</h1>
        <p class=""second-title"">Shift Schedule</p>
        <p style='margin-top:0px; text-align: center; font-size: 18px; color: #555;'>For {from:yyyy-MM-dd} to {to:yyyy-MM-dd}</p>

");

            foreach (var shift in shifts.OrderBy(s => s.ShiftDate))
            {
                sb.Append($"<h2>{shift.ShiftDate:yyyy-MM-dd} | Shift Type: {shift.ShiftType}</h2>");
                sb.Append($"<p>Time: {shift.StartTime:hh\\:mm} - {shift.EndTime:hh\\:mm}</p>");

                sb.Append("<table><thead><tr><th>Employee Name</th><th>Phone</th><th>Role</th></tr></thead><tbody>");
                foreach (var assignment in shift.Assignments)
                {
                    sb.Append("<tr>");
                    sb.Append($"<td>{assignment.Employee.FullName}</td>");
                    sb.Append($"<td>{assignment.Employee.Phone}</td>");
                    sb.Append($"<td>{assignment.Employee.Role}</td>");
                    sb.Append("</tr>");
                }
                sb.Append("</tbody></table><hr>");
            }

            sb.Append($@"
                <footer>
                    Generated by ShiftWise - {DateTime.Now:yyyy-MM-dd HH:mm}
                </footer>
            </body>
            </html>");
            return await Task.FromResult(sb.ToString());
        }

        public byte[] ConvertHtmlToPdf(string htmlContent)
        {
            var doc = new HtmlToPdfDocument()
            {
                GlobalSettings = {
                PaperSize = PaperKind.A4,
                Orientation = Orientation.Portrait
            },
                Objects = {
                new ObjectSettings() {
                    HtmlContent = htmlContent,
                    WebSettings = { DefaultEncoding = "utf-8" }
                }
            }
            };

            return _converter.Convert(doc);
        }
    }
}
